# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Copy Repository to remote server
        run: |
          sshpass -p ${{ secrets.REMOTE_PASSWORD }} scp -o StrictHostKeyChecking=no -r . ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/longplan/backend/main/

      - name: Deploy Docker image on remote server
        run: |
          sshpass -p ${{ secrets.REMOTE_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            docker rm $$(docker ps -aqf "name=${{ env.APP_NAME }}") -f || true
            docker rmi $$(docker images -aqf "reference=${{ env.APP_NAME }}") || true
            docker build --platform linux/amd64 -t ${{ env.APP_NAME }} /home/longplan/backend/main/
            docker run -d -p 5000:5000 -v /home/longplan/backend/main/config:/config --name ${{ env.APP_NAME }} ${{ env.APP_NAME }}
            rm -rf /home/longplan/backend/main/
          EOF

    env:
      APP_NAME: longplan-api

  build-deploy-develop:
    if: github.ref == 'refs/heads/develop'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Copy Repository to remote server
        run: |
          sshpass -p ${{ secrets.REMOTE_PASSWORD }} scp -o StrictHostKeyChecking=no -r . ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/longplan/backend/dev/

      - name: Deploy Docker image on remote server
        run: |
          sshpass -p ${{ secrets.REMOTE_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            docker rm $$(docker ps -aqf "name=${{ env.APP_NAME }}") -f || true
            docker rmi $$(docker images -aqf "reference=${{ env.APP_NAME }}") || true
            docker build --platform linux/amd64 -t ${{ env.APP_NAME }} /home/longplan/backend/dev/
            docker run -d -p 8000:8000 -v /home/longplan/backend/dev/config:/config --name ${{ env.APP_NAME }} ${{ env.APP_NAME }}
            rm -rf /home/longplan/backend/dev/
          EOF

    env:
      APP_NAME: longplan-api-dev
