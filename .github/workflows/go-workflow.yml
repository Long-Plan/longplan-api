# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
      - main
      - development

  pull_request:
    branches:
      - main
      - development

jobs:
  build-deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Test
        run: go test -v ./...

      - name: Static analysis
        run: go vet -v ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build --platform linux/amd64 -t ${{ env.APP_NAME }} .

      - name: Save Docker image to tar file
        run: docker save ${{ env.APP_NAME }} > ${{ env.APP_NAME }}.tar

      - name: Remove local Docker image
        run: docker rmi ${{ env.APP_NAME }}

      - name: Copy Docker image to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          source: ${{ env.APP_NAME }}.tar
          target: /home/longplan/backend/main/

      - name: Remove local tar file
        run: rm ${{ env.APP_NAME }}.tar

      - name: Deploy Docker image on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          script: |
            docker rm $$(docker ps -aqf "name=${{ env.APP_NAME }}") -f || true
            docker rmi $$(docker images -aqf "reference=${{ env.APP_NAME }}") || true
            docker load < /home/longplan/backend/main/${{ env.APP_NAME }}.tar
            rm /home/longplan/backend/main/${{ env.APP_NAME }}.tar
            docker run -d -p 5000:5000 -v /home/longplan/backend/main/config:/config --name ${{ env.APP_NAME }} ${{ env.APP_NAME }}

    env:
      APP_NAME: longplan-api

  build-deploy-develop:
    if: github.ref == 'refs/heads/develop'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Test
        run: go test -v ./...

      - name: Static analysis
        run: go vet -v ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build --platform linux/amd64 -t ${{ env.APP_NAME }} .

      - name: Save Docker image to tar file
        run: docker save ${{ env.APP_NAME }} > ${{ env.APP_NAME }}.tar

      - name: Remove local Docker image
        run: docker rmi ${{ env.APP_NAME }}

      - name: Copy Docker image to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          source: ${{ env.APP_NAME }}.tar
          target: /home/longplan/backend/develop/

      - name: Remove local tar file
        run: rm ${{ env.APP_NAME }}.tar

      - name: Deploy Docker image on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          script: |
            docker rm $$(docker ps -aqf "name=${{ env.APP_NAME }}") -f || true
            docker rmi $$(docker images -aqf "reference=${{ env.APP_NAME }}") || true
            docker load < /home/longplan/backend/develop/${{ env.APP_NAME }}.tar
            rm /home/longplan/backend/develop/${{ env.APP_NAME }}.tar
            docker run -d -p 5000:5000 -v /home/longplan/backend/develop/config:/config --name ${{ env.APP_NAME }} ${{ env.APP_NAME }}

    env:
      APP_NAME: longplan-api-dev
